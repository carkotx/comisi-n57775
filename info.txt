CLASE 1----------------------------------------
Refrescar los atributos en html y JS  porque se van a (converti) a JSX
Metos de arrays : en general - .map , .filter , .find
Destructuring
Rest/Spread operator (...)
Arrow functons
Modulos

CLASE 2------------------------------------------

1) Instalacion de Node.JS
Node.js: entorno de ejecucion de Javascript
2)Verificar las versiones de node.dj y NPM(superior a 1.8.x y 8.x Rest)
Instalacion del entorno
3) Intalacion del entorno : vite.dj

webpack + Babel

need to install the following packages: 
create-vite@5.2.3

correr a ejecutar la app

Node.js: entorno de ejecucion de Javascript

pwd : nos da la ruta actual

>npm create vite@latest : crea un proyecto de vite, 
 es decir, nos crea una carpeta con archivos en el sistema 
 operativo
> cd nombreCarpeta : nos movemos a la carpeta creada
> npm install o npm i : instala las dependencias del proyecto
> npm run dev : corre el proyecto en modo desarrollo

CLASE 3 ------------------------------------------

JSX

JSX es una extension de la sintaxis de JavaScript que 
nos permite escribir HTML en JavaScript de manera mas
sencilla y legible y que luego es transformado a JavaScript
 puro mediante Babel.

CLASE 4 ------------------------------------------

Props : son los parametros que se le pasan a un componente. 
Por default son de solo lectura y no se pueden modificar y 
viene predefinido y por defecto va recibir un objeto. 
Estados de un componente : Queda pendiente y se ve la clase que viene
imagenes
css frameworks

- bootstrap : https://getbootstrap.com/  | https://react-bootstrap.github.io/
- tailwind (*) : https://tailwindcss.com/
https://tailwindcss.com/docs/guides/vite
- Material UI : https://mui.com/
- Ant Design : https://ant.design/
- Ant Design : https://ant.design/

- https://github.com/comisiones-coderhouse/comision_57775
- https://vercel.com/ ---te da una url y te lo trae a local
  para ver los componentes que voy creando:
- https://chromewebstore.google.com/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi

alt+control+n = creamos archivos mas rapido
escribir (rfc) parado en al primera fila crea funsiones

 AFTER 1 ------------------------------------------

Common Command Line Commands

cd : change directory - Cambia el directorio actual
ls : list - Muestra los archivos y carpetas en el directorio actual
pwd : print working directory - Muestra la ruta del directorio actual
touch : crea un archivo
mkdir : crea una carpeta
rm : remove - Elimina un archivo
rm -r : remove recursively - Elimina una carpeta
code . : abre Visual Studio Code en el directorio actual


git init : inicializa un repositorio de git - crea una carpeta llamada .git en el directorio actual

git status : muestra el estado de los archivos en el repositorio de git

git clone
git add
git commit
git push

CLASE 5 ------------------------------------------

Tailwind extensiones : 

https://marketplace.visualstudio.com/items?itemName=pranaygp.vscode-css-peek
https://marketplace.visualstudio.com/items?itemName=heybourn.headwind
https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss


Hooks : es una funcion que nos permite agregar funcionalidades a un componente. Siempre se ejecutan dentro de un componente y no se pueden ejecutar en un condicional o un loop.

- useState : nos permite agregar estados a un componente
- useEffect : nos permite agregar efectos secundarios a un componente
- useRef
- useContext

Destructuring 
CLASE 5 ------------------------------------------

Tailwind extensiones : 

https://marketplace.visualstudio.com/items?itemName=pranaygp.vscode-css-peek
https://marketplace.visualstudio.com/items?itemName=heybourn.headwind
https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss


Hooks : es una funcion que nos permite agregar funcionalidades a un componente. Siempre se ejecutan dentro de un componente y no se pueden ejecutar en un condicional o un loop.

- useState : nos permite agregar estados a un componente
- useEffect : nos permite agregar efectos secundarios a un componente
- useRef
- useContext

- Destructuring(ojo) hacer en cursos futuros//se escribe con js para cortar caminos

ejemplo 1 componente boton-------------------------------------

import { useState } from "react"
function Button(props) {
 
  // estados o llamadas a hooks
  // una variable que se refresca, lo dificil es de donde se crea, tiene un valor
  //esto lo vamos llevar a DESTRUCTURING

/*
const arrayDeValores = useState("valor inicial")
const miEstado = arrayDeValores[0]//Esta es la variable reactiva o el estado
const setMiEstado = arrayDeValores[1]//esta es la funcion que modifica el estado
*/
//DESTRUCTURING...lo que era en 3 lineas lo llevamos a 1 linea

const [miEstado, setMiEstado] = useState("valor inicial")

//console.log(arrayDeValores)  

 /*const valores =useState()*/


  //acciones 

 const hacerClick=() => {
console.log("click")
//MiEstado = "nuevo valor"
setMiEstado("nuevo valor")
 }
  
  return (
    <button className="btn" onClick={hacerClick}>
      {miEstado}</button>
  )
}

Ejemplo 2 componente boton-------------------------------------

import { useState } from "react"

function Button() {

  // ESTADO
 // STRUCTURING ARRANCANDO EN 0
 // ojo el nombre de la funcion de los estados es el mismo nombre de los estados con SET adelante
   
 const [contador, setContador] = useState (0)

  // ACCION
   const hacerClick = () => {
    console.log("Click")
    // NO se puede hacer como JS manila
    //contador++ como se hacia en manila js
    //contador= contador + 1
    //contador += 1
    //console.log(contador)
    //setContador(contador++)
    setContador(contador + 1)
   }

  //VISTA

  // le colocamos al <button un evento onClick={?}
  // y como es un EVENTO tiene que realizar una ACCION
  //NOS HACEMOS UN NUEVO ESTADO CONTADOR
  //le coloco el estilo del boton con talwind className...

  return (
    <div>
      <button onClick={hacerClick} className="btn">click</button> 
      <p>contador : {contador}</p>
    </div>
  )
}

export default Button


CLASE 6 ------------------------------------------

Tipos de componentes : 

- Estructurales 
- Reutilizables

- Contenedores : es el que va hacer el pedido a  la api de MLibre, que hago,
el que los va guardar lo que recibe, va tener mayoritariamente cuestiones de 
logica,useState, useEffect, metodos, acciones, condicionales, bucles...y lo 
que se ve en el retorno es otro componente y se el componente REPRESENTACIONAL -->

uno va dentro del otro:  CONTENEDOR-->PRESENTACIONAL

_ Presentacionales : recibe props de su componente padre y la va mostrar


Container Design Pattern : es un patron de diseño que nos permite separar 
la logica de negocio de la logica de presentacion.


-API WEB : es un programa que alguien lo crea, que sirve para traducir informacion
emplo el entorno, api del DOM, la api de eventos, la api de fech...herramientas 
que estan, estas nos permiten hablar entre difeerentes tipos de lenguajes la api
es el traductor

-API REST : ES UN PROGRAMA QUE TIENE INFORMACION QUE ES REQUERIDA Y ESTA MISMA 
NOS DA UN ACCESO CON  UNA URL A LA CUAL PUEDO LLEGAR CON REST.

- EXITEN LAS API WEB Y API REST

ejemplos de APIS :

https://github.com/public-apis/public-apis
https://randomfox.ca/floof/


https://fakestoreapi.com/docs : no funcion
https://dummyjson.com/docs/products#products-all
https://www.themealdb.com/api.php


CLASE 7 ------------------------------------------

MVC : Modelo, Vista, Controlador 

Reejecucion de un componente : 

1) Cada vez que un estado cambia
2) Cada vez que cambian los props
3) Cada vez que un componente padre se re-renderiza


const nombres = ['Juan', 'Pedro', 'Maria'];

const r = nombres.forEach((item,index)=>{

})

const r = nombres.map((item,index)=>{
  return "horacio" + index
})
//[horacio0,horacio1,horacio2]


nombres.filter((item,index)=>{})
nombres.find((item,index)=>{})
nombres.reduce(()=>{})
nombres.sort(()=>{})


AFTER 2 ------------------------------------------

https://tailblocks.cc/
https://mambaui.com/components/profile
https://marketplace.visualstudio.com/items?itemName=alfredbirk.tailwind-documentation
https://magicui.design/docs/components/dot-pattern
https://ui.aceternity.com/
https://ui.shadcn.com/
https://javascript.info/fetch-api

Fetch => Api WEB
fetch() => Function

Promise => Api WEB
promise => Object

HTTP => HyperText Transfer Protocol


Request(Cliente)

URL/IP - METODO(GET/POST/PUT/DELETE)
HEADERS - BODY


Response(Servidor)

CODIGO - MENSAJE

1xx - Información
2xx - Aceptado
3xx - Redireccionado
4xx - Error de cliente
    401 - Unauthorized
    403 - Forbidden
    404 - Not Found
    405 - Method Not Allowed

5xx - Error de servidor
    500 - Internal Server Error
    502 - Bad Gateway
    503 - Service Unavailable
    504 - Gateway Timeout

    HEADERS - BODY


fetch("https://dummyjson.com/products")
.then((res)=>{

  res.status//200
  res.ok //true
  res.headers //{...}
  res.body
  
  res.text()
  res.formData()
  res.arrayBuffer()
  res.blob()

  return res.json()
})
.then((res)=>{
  console.log(res)
})
.catch((err)=>{
  
})